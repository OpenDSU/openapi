openapi: 3.0.1
info:
  title: OpenDSU communication APIs
  description: This a project to model OpenDSU communication systems using OpenAPI
    standard
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: http://localhost:8080
  - url: https://csc.rms.pharmaledger.app
tags:

  - name: APIHub APIs - MQ Hub
    description: Notification service. Send or receive messages using queue for anchorId
    externalDocs:
      description: Find out more
      url: https://opendsu.com

paths:

  /mq/{domain}/{hashDID}/token:
    get:
      tags:
        - APIHub APIs - MQ Hub
      summary: Request to create a new JWT token
      operationId: createJWTToken
      parameters:
        - name: domain
          in: path
          description:  DID domain for which JWT token is requested
          example: default
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: hashDID
          in: path
          description:  sha256 hash of the DID identifier
          example: 8wVnt83NUB3usrooEUWRhRChiyGQFDXBGC2uyt4LtndT
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: returns a list of messages received by the speciefied anchorId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        "500":
          description: Not able to create a new token

  /mq/{domain}/put/{hashDID}:
    put:
      security:
        - authorization: []
      tags:
        - APIHub APIs - MQ Hub
      summary: PUT a new message on MQ
      operationId: putMQMessage
      parameters:
        - name: domain
          in: path
          description:  DID domain
          example: default
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: hashDID
          in: path
          description:  sha256 hash of the DID identifier
          example: 8wVnt83NUB3usrooEUWRhRChiyGQFDXBGC2uyt4LtndT
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: returns a list of messages received by the speciefied anchorId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        "405":
          description: Domain doesn't have mq component enabled
        "403":
          description: No token was provided or invalid token
        "500":
          description: Not able to create a new token
  /mq/{domain}/get/{hashDID}/{signatureOfDid}:
    get:
      tags:
        - APIHub APIs - MQ Hub
      summary: Get a message from MQ
      operationId: getMQMessage
      parameters:
        - name: domain
          in: path
          description:  DID domain
          example: default
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: hashDID
          in: path
          description:  sha256 hash of the DID identifier
          example: 8wVnt83NUB3usrooEUWRhRChiyGQFDXBGC2uyt4LtndT
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: signatureOfDid
          in: path
          description:  Signature of the signed token using the same DID document as for hashedDID
          example: 30460221009cee7b5876a30f7e590673eaefe75497341c4927276237b4321888d48798ddfe02210083d8da4308f9dea539023a773a15ff74e6c7e64b7983f772987fbfbbca26488e
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: returned a message for this DID
          content:
            application/json:
              schema:
                type: object
        "204":
          description: No content yet.
        "405":
          description: Domain doesn't have mq component enabled
        "403":
          description: No token was provided or invalid token
        "500":
          description: Not able to create a new token

  /{domain}/delete/{hashDID}/{messageID}/{signatureOfDid}:
    delete:
      tags:
        - APIHub APIs - MQ Hub
      summary: Delete a message from MQ
      operationId: deleteMQMessage
      parameters:
        - name: domain
          in: path
          description:  DID domain
          example: default
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: hashDID
          in: path
          description:  sha256 hash of the DID identifier
          example: 8wVnt83NUB3usrooEUWRhRChiyGQFDXBGC2uyt4LtndT
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: messageID
          in: path
          description:  message ID that should be deleted from MQ
          example: 56WGqhXyP8N54zbRdTCEXRXWaLW236Nktow3XN7NFBdY/1668006644827
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: signatureOfDid
          in: path
          description:  Signature of the signed token using the same DID document as for hashedDID
          example: 30460221009cee7b5876a30f7e590673eaefe75497341c4927276237b4321888d48798ddfe02210083d8da4308f9dea539023a773a15ff74e6c7e64b7983f772987fbfbbca26488e
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Operation executed successfully
        "500":
          description: An error occured during deleting message from queue.

  /{domain}/take/{hashDID}/{messageID}/{signatureOfDid}:
    get:
      tags:
        - APIHub APIs - MQ Hub
      summary: Read and delete a message from MQ. The message is deleted from MQ prior to serving it to client
      operationId: takeMQMessage
      parameters:
        - name: domain
          in: path
          description:  DID domain
          example: default
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: hashDID
          in: path
          description:  sha256 hash of the DID identifier
          example: 8wVnt83NUB3usrooEUWRhRChiyGQFDXBGC2uyt4LtndT
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: messageID
          in: path
          description:  message ID that should be deleted from MQ
          example: 56WGqhXyP8N54zbRdTCEXRXWaLW236Nktow3XN7NFBdY/1668006644827
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: signatureOfDid
          in: path
          description:  Signature of the signed token using the same DID document as for hashedDID
          example: 30460221009cee7b5876a30f7e590673eaefe75497341c4927276237b4321888d48798ddfe02210083d8da4308f9dea539023a773a15ff74e6c7e64b7983f772987fbfbbca26488e
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Operation executed successfully
        "500":
          description: An error occured during reading or deleting message from queue.



components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    JWTToken:
      type: object
      properties:
        token:
          type: string
        expires:
          type: number
      example: |
        {"token":"2iVr8jPNNyNojJQ2EKzTz66u5rg4.oakF1h2zHGqJ8Ub5cuwH8GPXzwE3EVPnP7QZRGHYtGkohWahc8sMXTnWUngejdRQGwgkgvoqaBYLAfgFw83ML9PvgDRJvyqQtR99mCjTjBHhYCtTidySwhdJFTCyA48XzmnUN1JEd3Xnk6WUwMCruzqacfd7md84PUZdDGTqeGPNA9nFNK6LoHdfejXyfqQitd1GWiyZuVP8ESV1P8YB7WpFBmBD5eHeZiiZSxmGGmNKjFMSV9CK9EcnhoHrCEVvoYRxg1yrcyLDAtDZyxbtczpJCws1mMjoJx4KouTo7kepewfUmjJrzmQWztVgujNZSYx8J11DqUZXqLmRPbs57BZ6RkZkehEDWWrr3YViRf9tzAncb8DrABqtVeokyyTPXfonbRgyA2D9dfD1EAw3VxWR6F6B72xh68551uY9x2jyzDMzQBGH48fcoHZpH7a7zMqvNyPYqXWkAPDvazMwKF1qo782aPHUYqbubXatVae6K785LCHrUcEQPhC7gbJ7bvLQYZivW3EM9B8xyGsSyBoM2B8JAcz3WFPzZa8NsgZrU85A5SzTRGHEv6ZeoCH3UmcZjgroHSiDbZTFvwetZwA2VWV7piKCa42SNbwfBsyram2wvcwTGMtUXUzJk2Hke8SkRihFYaMzSyPBSQSRY31Ly2EXcgorkMqM29se6BUYYknWvZZLroxH4cpw9LzejUeLe5bx8Aic66ueYNxiE9kYkXVStDpdhTkPGE2HNDaDiUzhuSbSQGakwro5zxKixwsPk3XyDAE1CFyR7eFC7U3t8Bf7SGvQ5Txp7iUYVvQULeNop6NYKN.CkRvatu6DizRiw8M7C2xg41UzcSkVM1vBA6etakD62wFSLv7UNbJ2xhpQwqxppezG5Mr4ZGdDALd5yXGoosRQYp","expires":1667925722000}
